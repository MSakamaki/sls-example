service: sls-example
provider:
  name: aws
  runtime: nodejs14.x
  stage: ${self:custom.stage}
  region: ap-northeast-1
custom:
  bucketName: sls-example-${self:custom.stage}
  defaultEnvironmentGroup: dev
  stage: ${opt:stage, self:custom.defaultEnvironmentGroup}
  s3Sync:
    - bucketName: sls-example-${self:custom.stage}
      localDir: src
      params:
        - '**/*.html':
            CacheControl: 'no-store'
        - '**/*.json':
            CacheControl: 'public, max-age=2592000, immutable'
        - '**/*.js':
            CacheControl: 'public, max-age=2592000, immutable'
        - '**/*.css':
            CacheControl: 'public, max-age=2592000, immutable'
        - '**/*.webmanifest':
            CacheControl: 'public, max-age=2592000, immutable'
        - '**/*.map':
            CacheControl: 'public, max-age=2592000, immutable'
        - '**/*.ico':
            CacheControl: 'public, max-age=2592000, immutable'
        - 'assets/**':
            CacheControl: 'public, max-age=2592000, immutable'
plugins:
  - serverless-s3-sync
package:
  exclude:
    - ./**
  include:
    - ./src/**
resources:
  Resources:
    DefaultCachePolicy:
      Type: 'AWS::CloudFront::CachePolicy'
      Properties:
        CachePolicyConfig:
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 1
          Name: sls-cache-${self:custom.stage}
          ParametersInCacheKeyAndForwardedToOrigin:
            CookiesConfig:
              CookieBehavior: 'none'
            EnableAcceptEncodingBrotli: true
            EnableAcceptEncodingGzip: true
            HeadersConfig:
              HeaderBehavior: 'none'
            QueryStringsConfig:
              QueryStringBehavior: 'none'
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_200
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            Compress: true
            CachePolicyId: !Ref DefaultCachePolicy
            # https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
            TargetOriginId: ${self:custom.bucketName}.s3.ap-northeast-1.amazonaws.com
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
          Origins:
            - Id: ${self:custom.bucketName}.s3.ap-northeast-1.amazonaws.com
              # If it is less than 24 hours, you need to attach a region to the resource.
              DomainName:
                # https://sls-example-test.s3-ap-northeast-1.amazonaws.com/
                sls-example-${self:custom.stage}.s3-ap-northeast-1.amazonaws.com
                # Fn::GetAtt: [StaticContentsS3, DomainName]
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - '/'
                    - - origin-access-identity/cloudfront
                      - Ref: StaticCloudFrontOriginAccessIdentity
    StaticCloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment:
            Ref: AWS::StackName
    StaticContentsS3Policy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticContentsS3
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ' '
                    - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity'
                      - Ref: StaticCloudFrontOriginAccessIdentity
              Action: s3:GetObject
              Resource:
                Fn::Join:
                  - '/'
                  - - Fn::GetAtt:
                        - StaticContentsS3
                        - Arn
                    - '*'
    StaticContentsS3:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: sls-example-${self:custom.stage}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - '*'
  Outputs:
    CloudFrontDistribution:
      Description: atlassian distribution id.
      Value:
        Ref: CloudFrontDistribution